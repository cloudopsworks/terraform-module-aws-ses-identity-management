name: Terraform Module AWS SES Identity Management
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-ses-identity-management

description: |-
  This Terraform module provides comprehensive management of AWS SES (Simple Email Service) identities, supporting both 
  domain and email identity types. It offers advanced features including DKIM (DomainKeys Identified Mail) signing 
  with customizable configurations, automated Route 53 DNS record management for domain verification, and seamless 
  integration with SES configuration sets. The module supports both Amazon Easy DKIM and custom DKIM implementations, 
  with flexible options for key lengths and selectors. It's designed for organizations requiring robust email 
  infrastructure with proper authentication and verification mechanisms in place.

# Introduction to the project
introduction: |-
  The AWS SES Identity Management Terraform module offers a robust solution for managing email sending 
  capabilities through AWS Simple Email Service (SES). This module streamlines the process of setting up 
  and managing both domain and email identities, ensuring proper email authentication and delivery.

  Key features:
  - Comprehensive domain and email identity management
  - Advanced DKIM signing with support for both Easy DKIM and custom implementations
  - Automated Route 53 DNS record management for domain verification
  - Seamless configuration set integration for enhanced email handling
  - Flexible identity verification options with customizable settings
  - Mail-from domain configuration capabilities
  - Email feedback handling and forwarding options
  - Automatic DKIM record generation and management
  - Support for custom DKIM selectors and private keys
  - Integration with organizational tagging standards

  Implementation Benefits:
  - Simplified email infrastructure setup
  - Enhanced email deliverability through proper authentication
  - Automated DNS management reducing manual configuration
  - Standardized naming conventions and tagging
  - Flexible deployment options across different environments

# How to use this project
usage: |-
  To use this module, you need to configure the following input variables:

  ### Required Variables:
  - `org`: Organization configuration object containing:
    - `organization_name`: Name of your organization
    - `organization_unit`: Organization unit name
    - `environment_name`: Environment name
    - `environment_type`: Environment type (e.g., prod, dev)

  - `identities`: Map of SES identities to manage. Each identity can be either a domain or email:
    ```hcl
    identities = {
      "example-domain" = {
        domain = "example.com"
        verify = true
        dkim   = true
      }
      "example-email" = {
        email = "user@example.com"
      }
    }
    ```

  ### Optional Variables:
  - `extra_tags`: Additional tags to apply to resources
  - `spoke_def`: Spoke definition for naming convention

  ### Identity Configuration Options:
  Domain identity options:
  - `domain`: Domain name
  - `verify`: Enable Route 53 verification (default: false)
  - `dkim`: Enable DKIM signing (default: true)
  - `dkim_private_key`: Custom DKIM private key
  - `dkim_selector`: Custom DKIM selector
  - `dkim_easy`: Use Amazon Easy DKIM (default: true)
  - `dkim_easy_key_length`: Key length for Easy DKIM
  - `configuration_set`: Associated configuration set name

  Email identity options:
  - `email`: Email address
  - `configuration_set`: Associated configuration set name

# Example usage
examples: |-
  ### Basic Domain Identity Configuration
  ```hcl
  include "root" {
    path = find_in_parent_folders()
  }

  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-ses-identity-management.git?ref=v1.0.0"
  }

  inputs = {
    org = {
      organization_name  = "MyCompany"
      organization_unit = "technology"
      environment_name  = "production"
      environment_type  = "prod"
    }

    identities = {
      "main-domain" = {
        domain = "company.com"
        verify = true
        dkim   = true
      }
    }
  }
  ```

  ### Multiple Email Identities with Configuration Sets
  ```hcl
  inputs = {
    org = {
      organization_name  = "MyCompany"
      organization_unit = "technology"
      environment_name  = "production"
      environment_type  = "prod"
    }

    identities = {
      "support-email" = {
        email              = "support@company.com"
        configuration_set = "support-emails"
        forwarding_enabled = true
      }
      "sales-email" = {
        email              = "sales@company.com"
        configuration_set = "sales-emails"
        mail_from_domain  = "mail.company.com"
      }
    }
  }
  ```

  ### Advanced Domain Configuration with Custom DKIM
  ```hcl
  inputs = {
    org = {
      organization_name  = "MyCompany"
      organization_unit = "technology"
      environment_name  = "production"
      environment_type  = "prod"
    }

    identities = {
      "custom-domain" = {
        domain            = "custom.company.com"
        verify            = true
        dkim             = true
        dkim_easy        = false
        dkim_private_key = "YOUR_PRIVATE_KEY"
        dkim_selector    = "custom"
        configuration_set = "custom-domain-emails"
      }
    }

    extra_tags = {
      Project     = "Email System"
      Department = "IT"
    }

    spoke_def = "email"
  }
  ```

  ### Mixed Configuration with Multiple Identities
  ```hcl
  inputs = {
    org = {
      organization_name  = "MyCompany"
      organization_unit = "technology"
      environment_name  = "staging"
      environment_type  = "stage"
    }

    identities = {
      "main-domain" = {
        domain                   = "staging.company.com"
        verify                   = true
        dkim                    = true
        dkim_easy               = true
        dkim_easy_key_length    = "RSA_2048_BIT"
        configuration_set      = "staging-emails"
      }
      "notification-email" = {
        email                    = "notifications@staging.company.com"
        configuration_set      = "notification-emails"
        mail_from_domain        = "mail.staging.company.com"
        behavior_on_mx_failure = "USE_DEFAULT_VALUE"
      }
    }

    spoke_def = "ses"

    extra_tags = {
      Environment = "Staging"
      Team       = "DevOps"
    }
  }
  ```

# How to get started quickly
quickstart: |-
  1. Create a new Terragrunt configuration file (terragrunt.hcl):
     ```hcl
     include "root" {
       path = find_in_parent_folders()
     }

     terraform {
       source = "git::https://github.com/cloudopsworks/terraform-module-aws-ses-identity-management.git?ref=v1.0.0"
     }
     ```

  2. Configure organization and environment settings:
     ```hcl
     inputs = {
       org = {
         organization_name  = "MyCompany"
         organization_unit = "technology"
         environment_name  = "development"
         environment_type  = "dev"
       }
       spoke_def = "ses"
     }
     ```

  3. Add identity configurations:
     ```hcl
     inputs = {
       identities = {
         "main-domain" = {
           domain = "example.com"
           verify = true
           dkim   = true
         }
         "support-email" = {
           email              = "support@example.com"
           configuration_set = "support-emails"
         }
       }
     }
     ```

  4. (Optional) Add custom tags:
     ```hcl
     inputs = {
       extra_tags = {
         Project = "Email System"
         Owner   = "DevOps Team"
       }
     }
     ```

  5. Initialize and deploy:
     ```bash
     terragrunt init
     terragrunt plan
     terragrunt apply
     ```

  6. Verification steps:
     - Check Route 53 for created DNS records
     - Verify domain ownership in AWS SES console
     - Confirm DKIM setup and status
     - Test email sending capabilities once verified

  7. Monitor deployment:
     - Check AWS SES console for identity status
     - Verify DKIM signing is active
     - Ensure DNS records are properly propagated
     - Review any configuration set associations

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"